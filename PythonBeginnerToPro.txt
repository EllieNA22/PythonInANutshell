Installation:

Download Pyhton 
Download VS Code
Download extensions for VSCode 
(1-indent rainbow 2-python 3-pylance 4-rainbow brackets)
Create directory for your file
create new py file

-------------------
# To run a Python file, save this code in a file with a .py extension, for example: hello_world.py
# Open a terminal and navigate to the directory containing the file
# Run the file using the command: python hello_world.py

# This is a simple program that prints "Hello, World!" to the console
print("Hello, World!")
-----------------------------------------------------




# Use the input() function to take user input from the console
# This example asks for the user's name and greets them

# Prompt the user to enter their name
name = input("Enter your name: ")

# Print a greeting using the user's input
print(f"Hello, {name}!")
---------------------------------------------

# Variables are used to store data that can be used later in your program
# This example demonstrates declaring variables of different types

# Integer variable
age = 25

# Float variable
height = 5.9

# String variable
name = "Alice"

# Boolean variable
is_student = True

# Print all the variables
print(f"Name: {name}, Age: {age}, Height: {height}, Is Student: {is_student}")
-------------------------------------------------
# f-Strings are a way to format strings using the 'f' prefix
# They allow you to embed expressions inside string literals using curly braces {}

# Declare some variables
name = "Bob"
age = 30
height = 5.11

# Use an f-string to format a message with the variables
message = f"My name is {name}, I am {age} years old and {height} feet tall."

# Print the formatted message
print(message)
----------------------------------------------------
# Error handling allows you to catch and handle exceptions (errors) in your code
# Use try-except blocks to handle exceptions

try:
    # Try to divide by zero, which will raise an exception
    result = 10 / 0
except ZeroDivisionError as e:
    # Handle the exception and print an error message
    print(f"Error: {e}")

# Continue with the rest of the program
print("Program continues...")
---------------------------------------
# If statements are used to execute code based on a condition

# Declare a variable
age = 18

# Use an if statement to check the condition
if age >= 18:
    print("You are an adult.")
else:
    print("You are a minor.")
--------------------------------------
# While loops repeatedly execute a block of code as long as a condition is true

# Initialize a counter variable
count = 0

# Use a while loop to print numbers from 0 to 4
while count < 5:
    print(count)
    count += 1  # Increment the counter
--------------------------------------
# For loops iterate over a sequence (like a list or a range)

# Use a for loop to print numbers from 0 to 4
for i in range(5):
    print(i)

# Use a for loop to iterate over a list
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)
-------------------------------------
# Lists are used to store multiple items in a single variable

# Declare a list of numbers
numbers = [1, 2, 3, 4, 5]

# Append a new element to the list
numbers.append(6)

# Remove an element from the list
numbers.remove(3)

# Access elements by index
first_number = numbers[0]

# Print the modified list
print(numbers)
-------------------------------------
# Dictionaries store data in key-value pairs

# Create a dictionary
student = {
    "name": "Alice",
    "age": 20,
    "major": "Computer Science"
}

# Access values using keys
name = student["name"]

# Add a new key-value pair
student["GPA"] = 3.8

# Print the dictionary
print(student)
-----------------------------------
# Functions are blocks of reusable code that perform a specific task

# Define a function that takes two numbers and returns their sum
def add_numbers(a, b):
    return a + b

# Call the function and store the result
result = add_numbers(5, 7)

# Print the result
print(f"The sum is: {result}")
------------------------------------------
# In Python, everything is an object, even primitive data types

# Declare a string object
s = "Hello"

# Call a method on the string object
print(s.upper())  # Convert to uppercase

# Check the type of an object
print(type(s))  # Output: <class 'str'>
----------------------------------------------------
# Objects are instances of classes
# This example defines a simple class and creates an object from it

# Define a class
class Dog:
    def __init__(self, name, age):
        self.name = name  # Attribute
        self.age = age  # Attribute

    def bark(self):  # Method
        print("Woof!")

# Create an object (instance) of the Dog class
my_dog = Dog("Buddy", 3)

# Access the object's attributes and methods
print(my_dog.name)
my_dog.bark()
-------------------------------------------------
# Importing packages allows you to use external libraries in your code

# Import the math package for mathematical functions
import math

# Use the sqrt() function from the math package
result = math.sqrt(25)

# Print the result
print(f"The square root of 25 is: {result}")
------------------------------------------------
# An API (Application Programming Interface) allows different software programs to communicate with each other
# In Python, you can use APIs to fetch data from web services

# Example of a simple API request using the requests package
import requests

# Make a GET request to a public API
response = requests.get("https://api.github.com")

# Print the response status code
print(f"Status Code: {response.status_code}")

# Print the response data
print(response.json())
--------------------------------------------------
# The requests package is used to make HTTP requests in Python

# Import the requests package
import requests

# Send a GET request to a URL
response = requests.get("https://api.github.com")

# Check if the request was successful
if response.status_code == 200:
    # Print the response content
    print(response.json())
else:
    # Print an error message
    print(f"Failed to retrieve data: {response.status_code}")
---------------------------------------------------------
# The JSON package is used to work with JSON data in Python

import json

# JSON data as a string
json_data = '{"name": "John", "age": 30, "city": "New York"}'

# Parse JSON data into a Python dictionary
data = json.loads(json_data)

# Access values from the dictionary
name = data["name"]

# Convert a dictionary back into a JSON string
json_string = json.dumps(data, indent=4)

# Print the JSON string
print(json_string)
--------------------------------------------------------------
# Consuming an API involves making requests and processing the response

import requests

# Send a GET request to a simple API
response = requests.get("https://api.github.com/users/octocat")

# Check if the request was successful
if response.status_code == 200:
    # Parse the JSON response
    data = response.json()

    # Access specific data from the response
    username = data["login"]
    followers = data["followers"]

    # Print the data
    print(f"Username: {username}, Followers: {followers}")
else:
    print("Failed to fetch data")
----------------------------------------------------------------------
# Consuming a complex API involves handling multiple endpoints and processing large responses

import requests

# Define the API endpoint and parameters
api_url = "https://api.openweathermap.org/data/2.5/weather"
params = {
    "q": "London",
    "appid": "your_api_key",  # Replace with your API key
    "units": "metric"
}

# Send a GET request with parameters
response = requests.get(api_url, params=params)

# Check if the request was successful
if response.status_code == 200:
    # Parse the JSON response
    weather_data = response.json()

    # Access nested data
    temperature = weather_data["main"]["temp"]
    weather_description = weather_data["weather"][0]["description"]

    # Print the weather information
    print(f"Temperature: {temperature}Â°C, Description: {weather_description}")
else:
    print("Failed to fetch weather data")
-----------------------------------------------------------------------

--------------------------------------------------------------
# Writing to files is a common task for storing data persistently

# Open a file in write mode
with open("output.txt", "w") as file:
    # Write data to the file
    file.write("Hello, world!\n")
    file.write("Writing to files in Python.\n")

print("Data has been written to output.txt")
-------------------------------------------------------
# Reading data from a file and storing it in a list

# Open the file in read mode
with open("input.txt", "r") as file:
    # Read lines from the file and store them in a list
    lines = file.readlines()

# Print the list of lines
print("Lines from file:", lines)

--------------------------------------------------------
# Sensitive information such as passwords should be hidden or encrypted

# Define a sensitive piece of information
sensitive_data = "my_secret_password"

# Use basic obfuscation by replacing characters
obfuscated_data = "*" * len(sensitive_data)

# Print the obfuscated data
print(f"Obfuscated data: {obfuscated_data}")
------------------------------------------------
# Sending an email using the smtplib package

import smtplib
from email.mime.text import MIMEText

# Define the email sender and receiver
sender = "your_email@example.com"
receiver = "receiver_email@example.com"

# Create the email content
message = MIMEText("Hello, this is a test email from Python!")
message["Subject"] = "Test Email"
message["From"] = sender
message["To"] = receiver

# Send the email using SMTP
with smtplib.SMTP("smtp.example.com", 587) as server:
    server.starttls()
    server.login(sender, "your_password")  # Replace with your email password
    server.sendmail(sender, receiver, message.as_string())

print("Email sent successfully!")

-------------------------------------------------
# Handling multiple exceptions in a program

try:
    # Code that may raise exceptions
    result = 10 / 0  # This will raise a ZeroDivisionError
except ZeroDivisionError:
    print("Cannot divide by zero!")
except Exception as e:
    print(f"An error occurred: {e}")

----------------------------------------------------
gui sum
import tkinter as tk

def calculate_sum():
    try:
        # Get the values from the input fields
        num1 = float(entry1.get())
        num2 = float(entry2.get())
        
        # Calculate the sum
        result = num1 + num2
        
        # Update the result label
        result_label.config(text=f"Result: {result}")
    except ValueError:
        # Handle the case where the input is not a valid number
        result_label.config(text="Please enter valid numbers!")

# Create the main window
root = tk.Tk()
root.title("Sum Calculator")

# Create and place the first number label and entry
label1 = tk.Label(root, text="Enter first number:")
label1.pack(pady=5)
entry1 = tk.Entry(root)
entry1.pack(pady=5)

# Create and place the second number label and entry
label2 = tk.Label(root, text="Enter second number:")
label2.pack(pady=5)
entry2 = tk.Entry(root)
entry2.pack(pady=5)

# Create and place the calculate button
calculate_button = tk.Button(root, text="Calculate Sum", command=calculate_sum)
calculate_button.pack(pady=10)

# Create and place the result label
result_label = tk.Label(root, text="Result: ")
result_label.pack(pady=5)

# Run the main loop
root.mainloop()
------------------------------------------------------------


                                                                                                     Prepared By EllieN
